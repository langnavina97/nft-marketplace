{"ast":null,"code":"import _toConsumableArray from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _readOnlyError from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _regeneratorRuntime from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/navinalang/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/navinalang/nft-marketplace/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport CryptoBird from '../abis/CryptoBirdz.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                // modern browsers\n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, cryptoBird;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return window.web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = CryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = CryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // load crypto birdz\n\n                i = 0;\n\n              case 19:\n                if (!(i < totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.cryptoBirdz(i).call();\n\n              case 22:\n                cryptoBird = _context3.sent;\n                this.setState({\n                  cryptoBirdz: [].concat(_toConsumableArray(this.state.cryptoBirdz), [CryptoBird])\n                });\n\n              case 24:\n                _readOnlyError(\"i\"), i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Smart contract not deployed!');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      cryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sem-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Crypto Birdz NFTs (Non-Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/nft-marketplace/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","CryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","cryptoBirdz","cryptoBird","state","alert","props","mint","kryptoBird","send","from","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport CryptoBird from '../abis/CryptoBirdz.json';\n\nclass App extends Component {\n\n    async componentDidMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    // first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        // modern browsers\n        if (provider) {\n            console.log('Ethereum wallet is connected');\n            window.web3 = new Web3(provider);\n        } else {\n            console.log('no ethereum wallet detected');\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3;\n        const accounts = await window.web3.eth.getAccounts();\n        this.setState({ account: accounts })\n\n        const networkId = await web3.eth.net.getId();\n        const networkData = CryptoBird.networks[networkId];\n        if (networkData) {\n            const abi = CryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({ contract });\n\n            const totalSupply = await contract.methods.totalSupply().call();\n            this.setState({ totalSupply });\n\n            // load crypto birdz\n            for (const i = 0; i < totalSupply; i++) {\n                const cryptoBird = await contract.methods.cryptoBirdz(i).call();\n                this.setState({\n                    cryptoBirdz: [...this.state.cryptoBirdz, CryptoBird]\n                });\n            }\n\n\n        } else {\n            window.alert('Smart contract not deployed!')\n        }\n\n    }\n\n    mint = (kryptoBird) => {\n        this.state.contract.methods.mint(kryptoBird).send({ from: this.state.account });\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            cryptoBirdz: []\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className='navbar-brand col-sem-3 col-md-3 mr-0' style={{ color: 'white' }}>\n                        Crypto Birdz NFTs (Non-Fungible Tokens)\n                    </div>\n                    <ul className='navbar-nav px-3'>\n                        <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                            <small className='text-white'>\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}